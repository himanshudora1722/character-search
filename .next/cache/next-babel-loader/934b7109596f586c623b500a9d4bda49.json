{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux-immutable';\nimport globalReducer from '../../global/reducer';\n/**\n * @function createReducer - Combine reducer for given page level component with global ones\n * @param {Object} injectedReducers\n * @returns {function}\n */\n\nexport default function createReducer(injectedReducers) {\n  return combineReducers(_objectSpread({\n    global: globalReducer\n  }, injectedReducers));\n}","map":{"version":3,"sources":["/Users/himdora/Documents/Assignment/Himanshu/lib/reducers.js"],"names":["combineReducers","globalReducer","createReducer","injectedReducers","global"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,iBAAhC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AAEA;;;;;;AAKA,eAAe,SAASC,aAAT,CAAuBC,gBAAvB,EAAyC;AACtD,SAAOH,eAAe;AACpBI,IAAAA,MAAM,EAAEH;AADY,KAEjBE,gBAFiB,EAAtB;AAID","sourcesContent":["import { combineReducers } from 'redux-immutable';\nimport globalReducer from '../../global/reducer';\n\n/**\n * @function createReducer - Combine reducer for given page level component with global ones\n * @param {Object} injectedReducers\n * @returns {function}\n */\nexport default function createReducer(injectedReducers) {\n  return combineReducers({\n    global: globalReducer,\n    ...injectedReducers,\n  });\n}"]},"metadata":{},"sourceType":"module"}