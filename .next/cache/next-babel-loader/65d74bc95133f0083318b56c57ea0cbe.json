{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport nextReduxWrapper from 'next-redux-wrapper'; // import createReducer from './reducers';\n// import globalSaga from '../src/components/features/SearchDetail/SearchDetail.saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nconst enhancers = [applyMiddleware(...middlewares)]; // Choose compose method depending upon environment and platform\n\nconst composeEnhancers = true && false ? composeWithDevTools : compose;\n/**\n * Create redux store with the middlewares and enhancers\n *\n * @param {Object} options\n * @param {Object} options.key - Unique key to recognize the page component\n * @param {Object} options.reducer - Reducers associated with the page commponent\n * @param {Object} options.saga - Sagas associated with the page commponent\n */\n\nexport default (options => BaseComponent => {\n  debugger;\n  const hasKey = !!options.key;\n\n  if (!hasKey) {\n    throw new Error(`${BaseComponent.displayName} needs to be passed with a key`);\n  }\n\n  const hasReducer = !!options.reducer;\n  const hasSaga = !!options.saga;\n  const reducer = hasKey && hasReducer ? {\n    [options.key]: options.reducer\n  } : {};\n\n  const configureStore = (initialState = {}) => {\n    const store = createStore(reducer, initialState, composeEnhancers(...enhancers)); // Keep access to 'run' method of saga task in store so thats its available globally with store\n\n    store.runSaga = sagaMiddleware.run; // Keep record of reducer injected in store associated with unique key\n\n    store.injectedReducers = reducer; // if (globalSaga) {\n    //   // Run global saga and keep the task returned by running saga to access later while cancelling\n    //   store.globalSaga = { globalSaga, task: store.runSaga(globalSaga) };\n    // }\n    // Keep record of saga injected in store associated with unique key\n\n    store.injectedSagas = {};\n\n    if (hasSaga) {\n      // Run saga and keep the task returned by running saga to access later while cancelling\n      store.injectedSagas[options.key] = _objectSpread({}, options.saga, {\n        task: store.runSaga(options.saga)\n      });\n    }\n\n    return store;\n  };\n\n  return nextReduxWrapper(configureStore)(BaseComponent);\n});","map":{"version":3,"sources":["/Users/himdora/Documents/Assignment/Himanshu/lib/configureStore.js"],"names":["createStore","applyMiddleware","compose","composeWithDevTools","createSagaMiddleware","nextReduxWrapper","sagaMiddleware","middlewares","enhancers","composeEnhancers","options","BaseComponent","hasKey","key","Error","displayName","hasReducer","reducer","hasSaga","saga","configureStore","initialState","store","runSaga","run","injectedReducers","injectedSagas","task"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CAEA;AACA;;AAEA,MAAMC,cAAc,GAAGF,oBAAoB,EAA3C;AACA,MAAMG,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,SAAS,GAAG,CAACP,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAAlB,C,CAEA;;AACA,MAAME,gBAAgB,GACpB,gBACIN,mBADJ,GAEID,OAHN;AAKA;;;;;;;;;AAQA,gBAAeQ,OAAO,IAAKC,aAAD,IAAmB;AACzC;AACF,QAAMC,MAAM,GAAG,CAAC,CAACF,OAAO,CAACG,GAAzB;;AACA,MAAI,CAACD,MAAL,EAAa;AAAE,UAAM,IAAIE,KAAJ,CAAW,GAAEH,aAAa,CAACI,WAAY,gCAAvC,CAAN;AAAgF;;AAC/F,QAAMC,UAAU,GAAG,CAAC,CAACN,OAAO,CAACO,OAA7B;AACA,QAAMC,OAAO,GAAG,CAAC,CAACR,OAAO,CAACS,IAA1B;AACA,QAAMF,OAAO,GAAGL,MAAM,IAAII,UAAV,GAAuB;AAAE,KAACN,OAAO,CAACG,GAAT,GAAeH,OAAO,CAACO;AAAzB,GAAvB,GAA4D,EAA5E;;AAEA,QAAMG,cAAc,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AAC5C,UAAMC,KAAK,GAAGtB,WAAW,CACvBiB,OADuB,EAEvBI,YAFuB,EAGvBZ,gBAAgB,CAAC,GAAGD,SAAJ,CAHO,CAAzB,CAD4C,CAO5C;;AACAc,IAAAA,KAAK,CAACC,OAAN,GAAgBjB,cAAc,CAACkB,GAA/B,CAR4C,CAS5C;;AACAF,IAAAA,KAAK,CAACG,gBAAN,GAAyBR,OAAzB,CAV4C,CAW5C;AACA;AACA;AACA;AACA;;AACAK,IAAAA,KAAK,CAACI,aAAN,GAAsB,EAAtB;;AACA,QAAIR,OAAJ,EAAa;AACX;AACAI,MAAAA,KAAK,CAACI,aAAN,CAAoBhB,OAAO,CAACG,GAA5B,sBAAwCH,OAAO,CAACS,IAAhD;AAAsDQ,QAAAA,IAAI,EAAEL,KAAK,CAACC,OAAN,CAAcb,OAAO,CAACS,IAAtB;AAA5D;AACD;;AACD,WAAOG,KAAP;AACD,GAtBD;;AAwBA,SAAOjB,gBAAgB,CAACe,cAAD,CAAhB,CAAiCT,aAAjC,CAAP;AACD,CAjCD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport nextReduxWrapper from 'next-redux-wrapper';\n\n// import createReducer from './reducers';\n// import globalSaga from '../src/components/features/SearchDetail/SearchDetail.saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nconst enhancers = [applyMiddleware(...middlewares)];\n\n// Choose compose method depending upon environment and platform\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' && typeof window === 'object'\n    ? composeWithDevTools\n    : compose;\n\n/**\n * Create redux store with the middlewares and enhancers\n *\n * @param {Object} options\n * @param {Object} options.key - Unique key to recognize the page component\n * @param {Object} options.reducer - Reducers associated with the page commponent\n * @param {Object} options.saga - Sagas associated with the page commponent\n */\nexport default options => (BaseComponent) => {\n    debugger;\n  const hasKey = !!options.key;\n  if (!hasKey) { throw new Error(`${BaseComponent.displayName} needs to be passed with a key`); }\n  const hasReducer = !!options.reducer;\n  const hasSaga = !!options.saga;\n  const reducer = hasKey && hasReducer ? { [options.key]: options.reducer } : {};\n\n  const configureStore = (initialState = {}) => {\n    const store = createStore(\n      reducer,\n      initialState,\n      composeEnhancers(...enhancers),\n    );\n\n    // Keep access to 'run' method of saga task in store so thats its available globally with store\n    store.runSaga = sagaMiddleware.run;\n    // Keep record of reducer injected in store associated with unique key\n    store.injectedReducers = reducer;\n    // if (globalSaga) {\n    //   // Run global saga and keep the task returned by running saga to access later while cancelling\n    //   store.globalSaga = { globalSaga, task: store.runSaga(globalSaga) };\n    // }\n    // Keep record of saga injected in store associated with unique key\n    store.injectedSagas = {};\n    if (hasSaga) {\n      // Run saga and keep the task returned by running saga to access later while cancelling\n      store.injectedSagas[options.key] = { ...options.saga, task: store.runSaga(options.saga) };\n    }\n    return store;\n  };\n\n  return nextReduxWrapper(configureStore)(BaseComponent);\n};\n"]},"metadata":{},"sourceType":"module"}